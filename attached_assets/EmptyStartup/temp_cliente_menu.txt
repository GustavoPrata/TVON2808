// This is a temporary file to help restructure the cliente bot menu
// New menu structure:
// 1. Ver vencimento (stays the same)
// 2. Renovar plano (was case 3)
// 3. Ver pontos (new, with submenu)
// 4. Suporte t√©cnico (stays the same)
// 5. Falar com atendente (stays the same)

// Case 2: Renovar plano (move from case 3)
case "2": // Renovar plano
  const venc2 = cliente.vencimento
    ? new Date(cliente.vencimento).toLocaleDateString("pt-BR")
    : "N√£o definido";
  const dias2 = cliente.vencimento
    ? Math.ceil(
        (new Date(cliente.vencimento).getTime() - Date.now()) /
          (1000 * 60 * 60 * 24),
      )
    : 0;
  
  // Calculate valorTotal from pontos
  const pontosRenovacao2 = await storage.getPontosByClienteId(cliente.id);
  const valorRenovacao2 = pontosRenovacao2.reduce((sum, ponto) => {
    const valor = parseFloat(ponto.valor || '0');
    return sum + valor;
  }, 0);
  
  // Pegar o valor mensal do cliente
  const valorMensal2 = valorRenovacao2 > 0 ? valorRenovacao2 : 29.00;
  
  // Calcular pre√ßos com descontos progressivos
  const precos2 = this.calcularPrecosRenovacao(valorMensal2);
  
  // Mostrar informa√ß√µes do plano e op√ß√µes de renova√ß√£o
  await this.sendMessage(
    telefone,
    `*RENOVAR PLANO*\n\n` +
      `*Seu plano atual:*\n` +
      `‚Ä¢ Valor: R$ ${valorMensal2.toFixed(2).replace('.', ',')}\n` +
      `‚Ä¢ Pontos: ${pontosRenovacao2.length || 1}\n` +
      `‚Ä¢ Vencimento: ${venc2}\n` +
      `‚Ä¢ Dias restantes: ${dias2 > 0 ? dias2 : 0}\n\n` +
      `*Escolha o per√≠odo de renova√ß√£o:*\n\n` +
      `1Ô∏è‚É£ 1 m√™s - R$ ${precos2.mes1.toFixed(2).replace('.', ',')}\n` +
      `2Ô∏è‚É£ 3 meses - R$ ${precos2.mes3.toFixed(2).replace('.', ',')}\n` +
      `3Ô∏è‚É£ 6 meses - R$ ${precos2.mes6.toFixed(2).replace('.', ',')}\n` +
      `4Ô∏è‚É£ 1 ano - R$ ${precos2.ano1.toFixed(2).replace('.', ',')}\n\n` +
      `0Ô∏è‚É£ Voltar ao menu principal`
  );
  
  // Salvar estado para pr√≥xima intera√ß√£o
  this.conversaStates.set(telefone, {
    submenu: "renovar_periodo",
    lastActivity: new Date(),
    valorMensal: valorMensal2,
    precos: precos2,
    vencimentoAtual: cliente.vencimento,
    clienteId: cliente.id
  } as any);
  break;

// Case 3: Ver pontos (new)
case "3": // Ver pontos
  // Get client points
  const pontosCliente3 = await storage.getPontosByClienteId(cliente.id);
  const valorTotal3 = pontosCliente3.reduce((sum, ponto) => {
    const valor = parseFloat(ponto.valor || '0');
    return sum + valor;
  }, 0);
  
  // Display points information
  let pontosInfo = `üì± *SEUS PONTOS*\n\n`;
  pontosInfo += `*Total de pontos:* ${pontosCliente3.length || 1}\n`;
  pontosInfo += `*Valor mensal:* R$ ${valorTotal3 > 0 ? valorTotal3.toFixed(2).replace('.', ',') : "29,00"}\n\n`;
  
  if (pontosCliente3.length > 0) {
    pontosInfo += `*Pontos ativos:*\n`;
    pontosCliente3.forEach((ponto, index) => {
      pontosInfo += `${index + 1}. ${ponto.nome || 'Ponto ' + (index + 1)} - R$ ${parseFloat(ponto.valor || '0').toFixed(2).replace('.', ',')}\n`;
    });
    pontosInfo += `\n`;
  }
  
  pontosInfo += `*O que deseja fazer?*\n\n`;
  pontosInfo += `1Ô∏è‚É£ Adicionar novo ponto\n`;
  pontosInfo += `2Ô∏è‚É£ Remover ponto\n`;
  pontosInfo += `0Ô∏è‚É£ Voltar ao menu principal`;
  
  await this.sendMessage(telefone, pontosInfo);
  
  // Save state for submenu
  this.conversaStates.set(telefone, {
    submenu: "pontos_menu",
    lastActivity: new Date(),
    clienteId: cliente.id
  } as any);
  break;