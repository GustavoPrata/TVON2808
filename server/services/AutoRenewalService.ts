import { db } from '../db';
import { storage } from '../storage';
import { sistemas as sistemasTable, officeCredentials } from '@shared/schema';
import { sql, and, eq, lte } from 'drizzle-orm';

// Refer√™ncia para o WebSocket Server para broadcast
let wssRef: any = null;

export function setWebSocketServer(wss: any) {
  wssRef = wss;
}

export class AutoRenewalService {
  private intervalId: NodeJS.Timeout | null = null;
  private nextCheckTime: Date | null = null;
  private lastCheckTime: Date | null = null;

  async start() {
    // Parar intervalo anterior se existir
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }

    // Rodar a cada 60 segundos
    this.intervalId = setInterval(async () => {
      this.nextCheckTime = new Date(Date.now() + 60000); // Pr√≥xima verifica√ß√£o em 60s
      try {
        await this.checkAndRenewSystems();
      } catch (error) {
        console.error('‚ùå Erro no servi√ßo de renova√ß√£o autom√°tica:', error);
        await storage.createLog({
          nivel: 'error',
          origem: 'AutoRenewal',
          mensagem: 'Erro no servi√ßo de renova√ß√£o autom√°tica',
          detalhes: { error: error instanceof Error ? error.message : String(error) }
        });
      }
    }, 60000);

    console.log('üîÑ Renova√ß√£o autom√°tica ATIVADA - verificando a cada 60 segundos');
    await storage.createLog({
      nivel: 'info',
      origem: 'AutoRenewal',
      mensagem: 'Servi√ßo de renova√ß√£o autom√°tica ATIVADO',
      detalhes: { interval: '60 segundos' }
    });
    
    // Executar primeira verifica√ß√£o imediatamente
    this.checkAndRenewSystems().catch(async error => {
      console.error('‚ùå Erro na primeira verifica√ß√£o de renova√ß√£o:', error);
      await storage.createLog({
        nivel: 'error',
        origem: 'AutoRenewal',
        mensagem: 'Erro na primeira verifica√ß√£o de renova√ß√£o',
        detalhes: { error: error instanceof Error ? error.message : String(error) }
      });
    });
  }

  async stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      console.log('‚èπÔ∏è Renova√ß√£o autom√°tica DESATIVADA');
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Servi√ßo de renova√ß√£o autom√°tica DESATIVADO',
        detalhes: null
      });
    }
  }

  async checkAndRenewSystems() {
    try {
      this.lastCheckTime = new Date();
      console.log('\nüîç === INICIANDO VERIFICA√á√ÉO DE RENOVA√á√ÉO AUTOM√ÅTICA ===');
      console.log(`‚è∞ Hor√°rio da verifica√ß√£o: ${this.lastCheckTime.toISOString()}`);
      
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Iniciando verifica√ß√£o de renova√ß√£o autom√°tica',
        detalhes: { checkTime: this.lastCheckTime.toISOString() }
      });
      
      // N√£o precisa mais limpar itens da fila pois estamos usando o banco
      
      // 1. Buscar configura√ß√£o global
      const config = await storage.getOfficeAutomationConfig();
      console.log(`üìã Configura√ß√£o:`, {
        isEnabled: config?.isEnabled || false,
        renewalAdvanceTime: config?.renewalAdvanceTime || 60
      });
      
      if (!config || !config.isEnabled) {
        console.log('‚ö†Ô∏è Servi√ßo de renova√ß√£o desabilitado na configura√ß√£o');
        await storage.createLog({
          nivel: 'warn',
          origem: 'AutoRenewal',
          mensagem: 'Servi√ßo de renova√ß√£o desabilitado na configura√ß√£o',
          detalhes: null
        });
        return;
      }

      const renewalAdvanceMinutes = config.renewalAdvanceTime || 60;

      // 2. Buscar sistemas com renova√ß√£o autom√°tica habilitada
      const now = new Date();
      const checkTime = new Date(now.getTime() + renewalAdvanceMinutes * 60 * 1000);
      console.log(`üìÖ Verificando sistemas que expiram at√©: ${checkTime.toISOString()}`);
      console.log(`‚è≥ Antecedencia configurada: ${renewalAdvanceMinutes} minutos`);

      // Buscar TODOS os sistemas (renova√ß√£o autom√°tica para todos agora)
      const sistemasAutoRenew = await db
        .select()
        .from(sistemasTable);
      
      console.log(`üìã Total de sistemas encontrados: ${sistemasAutoRenew.length}`);
      
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Sistemas verificados para renova√ß√£o',
        detalhes: {
          totalSistemas: sistemasAutoRenew.length,
          renewalAdvanceMinutes: renewalAdvanceMinutes
        }
      });
      
      if (sistemasAutoRenew.length === 0) {
        console.log('‚ÑπÔ∏è Nenhum sistema encontrado no banco');
        await storage.createLog({
          nivel: 'info',
          origem: 'AutoRenewal',
          mensagem: 'Nenhum sistema encontrado no banco',
          detalhes: null
        });
        return;
      }
      
      // Log de verifica√ß√£o
      console.log(`üîç Analisando ${sistemasAutoRenew.length} sistemas...`);
      console.log('\nüìã Detalhes dos sistemas:');
      sistemasAutoRenew.forEach(sistema => {
        const expiracaoDate = sistema.expiracao ? new Date(sistema.expiracao) : null;
        const minutosAteExpiracao = expiracaoDate ? 
          (expiracaoDate.getTime() - now.getTime()) / (1000 * 60) : null;
        console.log(`  ‚Ä¢ ID: ${sistema.id} | SystemID: ${sistema.systemId} | User: ${sistema.username}`);
        console.log(`    - Expira√ß√£o: ${sistema.expiracao || 'N√ÉO DEFINIDA'}`);
        console.log(`    - Minutos at√© expirar: ${minutosAteExpiracao ? minutosAteExpiracao.toFixed(0) : 'N/A'}`);
        console.log(`    - Pontos ativos: ${sistema.pontosAtivos}/${sistema.maxPontosAtivos}`);
      });

      // Criar tasks de renova√ß√£o no banco para sistemas vencidos ou pr√≥ximos do vencimento
      for (const sistema of sistemasAutoRenew) {
        // Pular sistemas sem data de expira√ß√£o
        if (!sistema.expiracao) {
          console.log(`‚ö†Ô∏è Sistema ${sistema.systemId} sem data de expira√ß√£o definida`);
          continue;
        }
        
        const expiracaoDate = new Date(sistema.expiracao);
        const minutosAteExpiracao = (expiracaoDate.getTime() - now.getTime()) / (1000 * 60);
        const isExpired = expiracaoDate <= now;
        
        // APENAS adicionar se est√° vencido ou pr√≥ximo do vencimento
        if (isExpired || minutosAteExpiracao <= renewalAdvanceMinutes) {
          // Verificar se j√° existe task pendente para este sistema
          const existingTasks = await storage.getTasksBySystemId(sistema.systemId);
          const hasPendingTask = existingTasks.some(task => task.status === 'pending' || task.status === 'processing');
          
          if (!hasPendingTask) {
            // Criar task no banco
            const payload = {
              systemId: sistema.systemId,
              username: sistema.username,
              expiracao: sistema.expiracao,
              pontosAtivos: sistema.pontosAtivos,
              maxPontosAtivos: sistema.maxPontosAtivos
            };
            
            const taskId = await storage.createRenewalTask(sistema.systemId, payload);
            
            if (isExpired) {
              console.log(`üö® Sistema ${sistema.systemId} task criada (ID: ${taskId}) - VENCIDO h√° ${Math.abs(minutosAteExpiracao).toFixed(0)} minutos`);
            } else {
              console.log(`‚ö†Ô∏è Sistema ${sistema.systemId} task criada (ID: ${taskId}) - ${minutosAteExpiracao.toFixed(0)}min at√© vencer`);
            }
          }
        }
      }
      
      // Filtrar sistemas que precisam de renova√ß√£o
      console.log('\nüéØ Aplicando filtros de renova√ß√£o...');
      const sistemasParaRenovar = sistemasAutoRenew.filter(sistema => {
        // Verificar se est√° vencido ou pr√≥ximo do vencimento
        if (!sistema.expiracao) {
          return false; // Pular sistemas sem data de expira√ß√£o
        }
        const expiracaoDate = new Date(sistema.expiracao);
        const minutosAteExpiracao = (expiracaoDate.getTime() - now.getTime()) / (1000 * 60);
        const isExpired = expiracaoDate <= now;
        
        // SE EST√Å VENCIDO, renovar imediatamente
        if (isExpired) {
          console.log(`üö® Sistema ${sistema.systemId} (${sistema.username}) VENCIDO h√° ${Math.abs(minutosAteExpiracao).toFixed(0)} minutos - renova√ß√£o IMEDIATA`);
          return true;
        }
        
        // Verificar se est√° pr√≥ximo do vencimento (dentro do tempo configurado)
        if (minutosAteExpiracao <= renewalAdvanceMinutes) {
          console.log(`‚ö†Ô∏è Sistema ${sistema.systemId} (${sistema.username}) pr√≥ximo do vencimento - ${minutosAteExpiracao.toFixed(0)}min restantes`);
          return true;
        } else {
          console.log(`‚úÖ Sistema ${sistema.systemId} (${sistema.username}) ainda v√°lido - ${(minutosAteExpiracao/60).toFixed(1)}h restantes`);
          return false;
        }
      });
      
      if (sistemasParaRenovar.length === 0) {
        console.log('‚ú® Nenhum sistema precisa de renova√ß√£o no momento');
        console.log('üîç === FIM DA VERIFICA√á√ÉO DE RENOVA√á√ÉO AUTOM√ÅTICA ===\n');
        await storage.createLog({
          nivel: 'info',
          origem: 'AutoRenewal',
          mensagem: 'Nenhum sistema precisa de renova√ß√£o no momento',
          detalhes: { sistemasAnalisados: sistemasAutoRenew.length }
        });
        return;
      }

      console.log(`\n‚úÖ ${sistemasParaRenovar.length} sistema(s) prontos para renova√ß√£o!`);
      console.log(`üîÑ Iniciando processo de renova√ß√£o sequencial...`);
      
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Iniciando renova√ß√£o de sistemas',
        detalhes: {
          totalParaRenovar: sistemasParaRenovar.length,
          sistemas: sistemasParaRenovar.map(s => ({ id: s.id, systemId: s.systemId, username: s.username, expiracao: s.expiracao }))
        }
      });

      // 3. Processar cada sistema SEQUENCIALMENTE (n√£o em paralelo)
      for (const sistema of sistemasParaRenovar) {
        console.log(`\n========================================`);
        console.log(`üéØ Iniciando renova√ß√£o do sistema ${sistema.systemId}`);
        console.log(`üë§ Usu√°rio: ${sistema.username}`);
        console.log(`üìÖ Expira√ß√£o: ${new Date(sistema.expiracao).toISOString()}`);
        console.log(`========================================\n`);
        
        // Buscar task pendente para este sistema e marcar como processing
        const existingTasks = await storage.getTasksBySystemId(sistema.systemId);
        const pendingTask = existingTasks.find(task => task.status === 'pending');
        
        if (pendingTask) {
          await storage.updateRenewalTaskStatus(pendingTask.id, 'processing');
        }

        try {
          // Renovar sistema e aguardar conclus√£o antes de processar o pr√≥ximo
          await this.renewSystem(sistema);
          
          await storage.createLog({
            nivel: 'info',
            origem: 'AutoRenewal',
            mensagem: 'Sistema renovado com sucesso',
            detalhes: {
              systemId: sistema.id,
              systemId: sistema.systemId,
              username: sistema.username
            }
          });
          
          // Aguardar 5 segundos entre renova√ß√µes para n√£o sobrecarregar
          console.log(`‚è≥ Aguardando 5 segundos antes da pr√≥xima renova√ß√£o...`);
          await new Promise(resolve => setTimeout(resolve, 5000));
        } catch (error) {
          console.error(`‚ùå Erro ao renovar sistema ${sistema.systemId}:`, error);
          
          await storage.createLog({
            nivel: 'error',
            origem: 'AutoRenewal',
            mensagem: 'Erro ao renovar sistema',
            detalhes: {
              systemId: sistema.id,
              systemId: sistema.systemId,
              username: sistema.username,
              error: error instanceof Error ? error.message : String(error)
            }
          });
          
          // Marcar task como failed no banco
          const existingTasks = await storage.getTasksBySystemId(sistema.systemId);
          const processingTask = existingTasks.find(task => task.status === 'processing');
          
          if (processingTask) {
            await storage.updateRenewalTaskStatus(
              processingTask.id, 
              'failed', 
              null,
              error instanceof Error ? error.message : 'Erro desconhecido'
            );
          }
        }
      }
      
      console.log(`‚úÖ Processo de renova√ß√£o sequencial conclu√≠do`);
      console.log('üîç === FIM DA VERIFICA√á√ÉO DE RENOVA√á√ÉO AUTOM√ÅTICA ===\n');
      
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Verifica√ß√£o de renova√ß√£o autom√°tica conclu√≠da',
        detalhes: {
          sistemasRenovados: sistemasParaRenovar.length
        }
      });
    } catch (error) {
      console.error('‚ùå Erro ao verificar sistemas para renova√ß√£o:', error);
      console.log('üîç === FIM DA VERIFICA√á√ÉO DE RENOVA√á√ÉO AUTOM√ÅTICA (COM ERRO) ===\n');
      
      await storage.createLog({
        nivel: 'error',
        origem: 'AutoRenewal',
        mensagem: 'Erro ao verificar sistemas para renova√ß√£o',
        detalhes: {
          error: error instanceof Error ? error.message : String(error)
        }
      });
    }
  }

  async renewSystem(sistema: any) {
    const traceId = `renewal_${sistema.systemId}_${Date.now()}`;
    try {
      console.log(`üîÑ [AutoRenewal] INICIANDO renova√ß√£o - TraceId: ${traceId}`);
      console.log(`  Sistema ID: ${sistema.id}`);
      console.log(`  Sistema SystemID: ${sistema.systemId}`);
      console.log(`  Username: ${sistema.username}`);
      console.log(`  Expira√ß√£o atual: ${sistema.expiracao}`);
      
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Iniciando renova√ß√£o de sistema individual',
        detalhes: {
          traceId,
          systemId: sistema.id,
          systemId: sistema.systemId,
          username: sistema.username,
          expiracaoAtual: sistema.expiracao
        }
      });

      // 1. Verificar se j√° existe uma task pendente para este sistema
      console.log(`üîç [AutoRenewal] Verificando se j√° existe task pendente para o sistema ${sistema.id} [${traceId}]...`);
      
      const existingPendingTasks = await db
        .select()
        .from(officeCredentials)
        .where(
          and(
            eq(officeCredentials.status, 'pending'),
            eq(officeCredentials.systemId, sistema.id)
          )
        );
      
      if (existingPendingTasks.length > 0) {
        console.log(`‚ö†Ô∏è [AutoRenewal] J√° existe task pendente para o sistema ${sistema.id} [${traceId}]`);
        console.log(`  Tasks encontradas: ${existingPendingTasks.length}`);
        console.log(`  Task ID: ${existingPendingTasks[0].id}`);
        console.log(`  Task Username: ${existingPendingTasks[0].username}`);
        console.log(`  Task Criada em: ${existingPendingTasks[0].generatedAt}`);
        
        await storage.createLog({
          nivel: 'info',
          origem: 'AutoRenewal',
          mensagem: 'Task de renova√ß√£o j√° existe para este sistema - pulando cria√ß√£o',
          detalhes: {
            traceId,
            systemId: sistema.id,
            systemId: sistema.systemId,
            existingTaskId: existingPendingTasks[0].id,
            existingTaskUsername: existingPendingTasks[0].username,
            existingTasksCount: existingPendingTasks.length
          }
        });
        
        return; // Retornar sem criar nova task
      }

      // 2. Criar task pendente no banco com systemId no metadata
      console.log(`üíæ [AutoRenewal] Nenhuma task pendente encontrada - criando nova task de renova√ß√£o [${traceId}]...`);
      
      const taskData = {
        username: `renovacao_${Date.now()}`,
        password: 'pending',
        source: 'renewal',
        status: 'pending',
        generatedAt: new Date(),
        systemId: sistema.id // Adicionar systemId diretamente no registro
      };
      
      console.log(`üîç [AutoRenewal] Dados da task a criar [${traceId}]:`, JSON.stringify(taskData, null, 2));
      
      const [task] = await db
        .insert(officeCredentials)
        .values(taskData)
        .returning();

      console.log(`‚úÖ [AutoRenewal] Task criada com sucesso [${traceId}]:`);
      console.log(`  Task ID: ${task.id}`);
      console.log(`  Sistema ID: ${task.systemId}`);
      console.log(`  Username da task: ${task.username}`);
      
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Task de renova√ß√£o criada com sucesso',
        detalhes: {
          traceId,
          taskId: task.id,
          systemId: task.systemId,
          taskUsername: task.username
        }
      });

      // 3. Marcar sistema como em renova√ß√£o no banco
      console.log(`üìä [AutoRenewal] Atualizando sistema no banco [${traceId}]...`);
      
      const updateResult = await db
        .update(sistemasTable)
        .set({
          atualizadoEm: new Date()
        })
        .where(eq(sistemasTable.id, sistema.id))
        .returning();

      if (updateResult && updateResult.length > 0) {
        console.log(`‚úÖ [AutoRenewal] Sistema atualizado no banco [${traceId}]:`);
        console.log(`  Timestamp atualizado`);
        console.log(`  Task criada - aguardando processamento pela extens√£o`);
      } else {
        console.warn(`‚ö†Ô∏è [AutoRenewal] Sistema n√£o retornou dados ap√≥s update [${traceId}]`);
      }
      
      console.log(`üìù [AutoRenewal] Task ${task.id} criada e aguardando extens√£o [${traceId}]`);
      console.log(`üéØ [AutoRenewal] A extens√£o dever√° processar a task e chamar updateSistemaRenewal`);

    } catch (error) {
      console.error(`üî¥ [AutoRenewal] ERRO ao criar task de renova√ß√£o [${traceId}]:`, error);
      console.error(`  Sistema ID: ${sistema.id}`);
      console.error(`  Sistema SystemID: ${sistema.systemId}`);
      console.error(`  Mensagem: ${error instanceof Error ? error.message : String(error)}`);
      console.error(`  Stack:`, error instanceof Error ? error.stack : 'N/A');
      
      await storage.createLog({
        nivel: 'error',
        origem: 'AutoRenewal',
        mensagem: 'Erro ao criar task de renova√ß√£o',
        detalhes: {
          traceId,
          systemId: sistema.id,
          systemId: sistema.systemId,
          error: error instanceof Error ? error.message : String(error),
          stack: error instanceof Error ? error.stack : 'N/A'
        }
      });
      
      throw error; // Re-throw para que o erro seja tratado no n√≠vel superior
    }
  }

  // Obter status da fila de renova√ß√£o
  async getQueueStatus() {
    try {
      // Buscar todas as tasks do banco
      const allTasks = await storage.getAllRenewalTasks();
      
      // Contar por status
      const pendingCount = allTasks.filter(task => task.status === 'pending').length;
      const processingCount = allTasks.filter(task => task.status === 'processing').length;
      const completedCount = allTasks.filter(task => task.status === 'completed').length;
      const failedCount = allTasks.filter(task => task.status === 'failed').length;
      
      return {
        nextCheckTime: this.nextCheckTime,
        lastCheckTime: this.lastCheckTime,
        isRunning: this.intervalId !== null,
        pendingCount,
        processingCount,
        completedCount,
        failedCount,
        totalTasks: allTasks.length
      };
    } catch (error) {
      console.error('Erro ao obter status da fila:', error);
      return {
        nextCheckTime: this.nextCheckTime,
        lastCheckTime: this.lastCheckTime,
        isRunning: this.intervalId !== null,
        pendingCount: 0,
        processingCount: 0,
        completedCount: 0,
        failedCount: 0,
        totalTasks: 0
      };
    }
  }
  
  // Obter itens da fila de renova√ß√£o
  async getQueueItems() {
    try {
      // Buscar todas as tasks pendentes e em processamento
      const allTasks = await storage.getAllRenewalTasks();
      
      // Filtrar apenas as tasks pendentes e em processamento
      const queueItems = allTasks.filter(task => 
        task.status === 'pending' || task.status === 'processing'
      );
      
      // Ordenar por prioridade e data de cria√ß√£o
      queueItems.sort((a, b) => {
        // Priorizar por status: processing > pending
        if (a.status === 'processing' && b.status !== 'processing') return -1;
        if (b.status === 'processing' && a.status !== 'processing') return 1;
        
        // Depois ordenar por prioridade (menor valor = maior prioridade)
        const priorityDiff = (a.priority || 999) - (b.priority || 999);
        if (priorityDiff !== 0) return priorityDiff;
        
        // Por √∫ltimo, ordenar por data de cria√ß√£o (mais antigo primeiro)
        const aTime = new Date(a.createdAt).getTime();
        const bTime = new Date(b.createdAt).getTime();
        return aTime - bTime;
      });
      
      return queueItems;
    } catch (error) {
      console.error('Erro ao obter itens da fila:', error);
      return [];
    }
  }
  
  // Backward compatibility - mant√©m getRenewalQueue mas usa o novo m√©todo
  async getRenewalQueue() {
    const queueItems = await this.getQueueItems();
    const status = await this.getQueueStatus();
    
    return {
      queue: queueItems.map(item => ({
        ...item,
        sistemaName: item.systemId,
        estimatedTime: item.createdAt
      })),
      ...status
    };
  }
  
  // M√©todo para adicionar task √† fila
  async addToQueue(systemId: string, payload: any): Promise<number> {
    try {
      const taskId = await storage.createRenewalTask(systemId, payload);
      console.log(`‚úÖ Task ${taskId} adicionada √† fila para sistema ${systemId}`);
      return taskId;
    } catch (error) {
      console.error(`Erro ao adicionar task √† fila para sistema ${systemId}:`, error);
      throw error;
    }
  }
  
  // M√©todo para obter pr√≥xima task da fila
  async getNextTask() {
    try {
      const task = await storage.getNextPendingRenewalTaskFromQueue();
      if (task) {
        console.log(`üì¶ Pr√≥xima task obtida da fila: ID ${task.id} para sistema ${task.systemId}`);
      }
      return task;
    } catch (error) {
      console.error('Erro ao obter pr√≥xima task da fila:', error);
      return null;
    }
  }
  
  // M√©todo para marcar task como completa
  async completeTask(taskId: number, result: any) {
    try {
      await storage.updateRenewalTaskStatus(taskId, 'completed', result);
      console.log(`‚úÖ Task ${taskId} marcada como conclu√≠da`);
    } catch (error) {
      console.error(`Erro ao marcar task ${taskId} como conclu√≠da:`, error);
      throw error;
    }
  }
  
  // M√©todo para marcar task como falhada
  async failTask(taskId: number, error: string) {
    try {
      await storage.updateRenewalTaskStatus(taskId, 'failed', null, error);
      console.log(`‚ùå Task ${taskId} marcada como falhada: ${error}`);
    } catch (error) {
      console.error(`Erro ao marcar task ${taskId} como falhada:`, error);
      throw error;
    }
  }
  
  // Obter informa√ß√µes sobre sistemas programados para renova√ß√£o
  async getScheduledRenewals() {
    try {
      // Buscar TODOS os sistemas agora
      const sistemas = await db
        .select()
        .from(sistemasTable);
      
      const now = new Date();
      
      return sistemas.map(sistema => {
        const expiracaoDate = new Date(sistema.expiracao);
        const minutosAteExpiracao = (expiracaoDate.getTime() - now.getTime()) / (1000 * 60);
        
        return {
          internalId: sistema.id,  // ID interno do banco (n√∫mero)
          systemId: sistema.systemId,  // systemId externo (string)
          expiration: sistema.expiracao,
          minutesUntilExpiration: Math.floor(minutosAteExpiracao),
          isExpired: expiracaoDate <= now
        };
      }).sort((a, b) => a.minutesUntilExpiration - b.minutesUntilExpiration);
    } catch (error) {
      console.error('Erro ao obter renova√ß√µes programadas:', error);
      return [];
    }
  }


  // M√©todo para marcar uma task de renova√ß√£o como falhada
  async failTask(taskId: number, errorMessage: string) {
    try {
      console.log(`‚ùå [AutoRenewal] Marcando task ${taskId} como falhada`);
      console.log(`  Motivo: ${errorMessage}`);
      
      // Atualizar status da task no banco
      await storage.updateRenewalTaskStatus(taskId, 'failed', null, errorMessage);
      
      // Log do erro
      await storage.createLog({
        nivel: 'error',
        origem: 'AutoRenewal',
        mensagem: 'Task de renova√ß√£o falhada',
        detalhes: {
          taskId: taskId,
          error: errorMessage
        }
      });
      
      return { success: true };
    } catch (error) {
      console.error(`‚ùå Erro ao marcar task ${taskId} como falhada:`, error);
      throw error;
    }
  }
  
  // M√©todo para completar uma task de renova√ß√£o com sucesso
  async completeTask(taskId: number, credentials: { username?: string, password?: string, systemId?: string, metadata?: any }) {
    try {
      console.log(`‚úÖ [AutoRenewal] Completando task ${taskId}`);
      console.log(`  Username: ${credentials.username || 'n√£o informado'}`);
      console.log(`  SystemId: ${credentials.systemId || 'n√£o informado'} (tipo: ${typeof credentials.systemId})`);  // Log para confirmar tipo
      
      // Valida√ß√£o importante: username √© obrigat√≥rio para renova√ß√£o
      if (!credentials.username || !credentials.password) {
        throw new Error('Username e password s√£o obrigat√≥rios para completar renova√ß√£o');
      }
      
      // Verificar se username √© apenas num√©rico (userId)
      if (/^\d+$/.test(credentials.username)) {
        throw new Error(`Username inv√°lido (apenas userId): ${credentials.username}`);
      }
      
      // Atualizar status da task no banco como completed
      await storage.updateRenewalTaskStatus(taskId, 'completed', {
        username: credentials.username,
        password: credentials.password,
        systemId: credentials.systemId,
        completedAt: new Date().toISOString()
      });
      
      // Se temos systemId, atualizar o sistema
      if (credentials.systemId) {
        console.log(`üîç Buscando sistema por systemId string: ${credentials.systemId}`);
        const sistema = await storage.getSistemaBySystemId(credentials.systemId);  // Usar m√©todo correto para buscar por string
        if (sistema) {
          // Atualizar credenciais do sistema
          await storage.updateSistemaRenewal(
            sistema.systemId,
            credentials.username,
            credentials.password
          );
          
          console.log(`‚úÖ Sistema ${sistema.systemId} atualizado com novas credenciais`);
        }
      }
      
      // Log de sucesso
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Task de renova√ß√£o completada com sucesso',
        detalhes: {
          taskId: taskId,
          systemId: credentials.systemId,
          username: credentials.username
        }
      });
      
      return { success: true };
    } catch (error) {
      console.error(`‚ùå Erro ao completar task ${taskId}:`, error);
      
      // Em caso de erro, marcar task como falhada
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      await this.failTask(taskId, errorMessage);
      
      throw error;
    }
  }

  // M√©todo para for√ßar renova√ß√£o de um sistema espec√≠fico
  async forceRenew(systemId: string) {
    try {
      const [sistema] = await db
        .select()
        .from(sistemasTable)
        .where(eq(sistemasTable.systemId, systemId))
        .limit(1);

      if (!sistema) {
        await storage.createLog({
          nivel: 'warn',
          origem: 'AutoRenewal',
          mensagem: 'Sistema n√£o encontrado para renova√ß√£o for√ßada',
          detalhes: {
            systemId: systemId
          }
        });
        throw new Error(`Sistema ${systemId} n√£o encontrado`);
      }

      console.log(`üîÑ For√ßando renova√ß√£o do sistema ${systemId}`);
      
      await storage.createLog({
        nivel: 'info',
        origem: 'AutoRenewal',
        mensagem: 'Renova√ß√£o for√ßada iniciada',
        detalhes: {
          systemId: systemId,
          username: sistema.username
        }
      });
      
      await this.renewSystem(sistema);
      return { success: true, message: `Renova√ß√£o do sistema ${systemId} iniciada` };
    } catch (error) {
      console.error(`‚ùå Erro ao for√ßar renova√ß√£o do sistema ${systemId}:`, error);
      
      await storage.createLog({
        nivel: 'error',
        origem: 'AutoRenewal',
        mensagem: 'Erro ao for√ßar renova√ß√£o',
        detalhes: {
          systemId: systemId,
          error: error instanceof Error ? error.message : String(error)
        }
      });
      
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }
  
  // M√©todo para limpar estado de renova√ß√£o de um sistema  
  clearRenewalState(systemId: string) {
    console.log(`üßπ Limpando estado de renova√ß√£o para systemId: ${systemId}`);
    // Este m√©todo pode ser expandido futuramente se mantivermos estado in-memory
    // Por enquanto, apenas log para debugging
  }

}

// Inst√¢ncia singleton do servi√ßo
export const autoRenewalService = new AutoRenewalService();