import { db } from '../db';
import { storage } from '../storage';
import { sistemas as sistemasTable, officeCredentials } from '@shared/schema';
import { sql, and, eq, lte } from 'drizzle-orm';

// Refer√™ncia para o WebSocket Server para broadcast
let wssRef: any = null;

export function setWebSocketServer(wss: any) {
  wssRef = wss;
}

// Interfaces para a fila de renova√ß√£o
interface RenewalQueueItem {
  sistemaId: number;
  username: string;
  status: 'waiting' | 'processing' | 'completed' | 'error';
  estimatedTime?: number; // Minutos at√© renova√ß√£o
  addedAt: Date;
  startedAt?: Date;
  completedAt?: Date;
  error?: string;
  expiration: string;
  lastRenewalAt?: string | null;
  renewalCount?: number;
}

export class AutoRenewalService {
  private intervalId: NodeJS.Timeout | null = null;
  private isRenewing: Set<number> = new Set(); // Evita renova√ß√µes duplicadas
  private renewalQueue: Map<number, RenewalQueueItem> = new Map(); // Fila de renova√ß√£o
  private nextCheckTime: Date | null = null;
  private lastCheckTime: Date | null = null;

  start() {
    // Parar intervalo anterior se existir
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }

    // Rodar a cada 60 segundos
    this.intervalId = setInterval(() => {
      this.nextCheckTime = new Date(Date.now() + 60000); // Pr√≥xima verifica√ß√£o em 60s
      this.checkAndRenewSystems().catch(error => {
        console.error('‚ùå Erro no servi√ßo de renova√ß√£o autom√°tica:', error);
      });
    }, 60000);

    console.log('üîÑ Renova√ß√£o autom√°tica ATIVADA - verificando a cada 60 segundos');
    
    // Executar primeira verifica√ß√£o imediatamente
    this.checkAndRenewSystems().catch(error => {
      console.error('‚ùå Erro na primeira verifica√ß√£o de renova√ß√£o:', error);
    });
  }

  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      console.log('‚èπÔ∏è Renova√ß√£o autom√°tica DESATIVADA');
    }
  }

  async checkAndRenewSystems() {
    try {
      this.lastCheckTime = new Date();
      console.log('\nüîç === INICIANDO VERIFICA√á√ÉO DE RENOVA√á√ÉO AUTOM√ÅTICA ===');
      console.log(`‚è∞ Hor√°rio da verifica√ß√£o: ${this.lastCheckTime.toISOString()}`);
      
      // Limpar itens antigos da fila (mais de 1 hora)
      this.cleanupQueue();
      
      // 1. Buscar configura√ß√£o global
      const config = await storage.getOfficeAutomationConfig();
      console.log(`üìã Configura√ß√£o:`, {
        isEnabled: config?.isEnabled || false,
        renewalAdvanceTime: config?.renewalAdvanceTime || 60
      });
      
      if (!config || !config.isEnabled) {
        console.log('‚ö†Ô∏è Servi√ßo de renova√ß√£o desabilitado na configura√ß√£o');
        return;
      }

      const renewalAdvanceMinutes = config.renewalAdvanceTime || 60;

      // 2. Buscar sistemas com renova√ß√£o autom√°tica habilitada
      const now = new Date();
      const checkTime = new Date(now.getTime() + renewalAdvanceMinutes * 60 * 1000);
      console.log(`üìÖ Verificando sistemas que expiram at√©: ${checkTime.toISOString()}`);
      console.log(`‚è≥ Antecedencia configurada: ${renewalAdvanceMinutes} minutos`);

      // Buscar todos os sistemas com renova√ß√£o autom√°tica habilitada
      const sistemasAutoRenew = await db
        .select()
        .from(sistemasTable)
        .where(eq(sistemasTable.autoRenewalEnabled, true));
      
      console.log(`üìã Total de sistemas com autoRenewal habilitado: ${sistemasAutoRenew.length}`);
      
      if (sistemasAutoRenew.length === 0) {
        console.log('‚ÑπÔ∏è Nenhum sistema com renova√ß√£o autom√°tica habilitada');
        return;
      }
      
      // Log de verifica√ß√£o
      console.log(`üîç Analisando ${sistemasAutoRenew.length} sistemas com renova√ß√£o autom√°tica...`);
      console.log('\nüìã Detalhes dos sistemas:');
      sistemasAutoRenew.forEach(sistema => {
        const expiracaoDate = sistema.expiracao ? new Date(sistema.expiracao) : null;
        const minutosAteExpiracao = expiracaoDate ? 
          (expiracaoDate.getTime() - now.getTime()) / (1000 * 60) : null;
        console.log(`  ‚Ä¢ ID: ${sistema.id} | User: ${sistema.username}`);
        console.log(`    - Expira√ß√£o: ${sistema.expiracao || 'N√ÉO DEFINIDA'}`);
        console.log(`    - Minutos at√© expirar: ${minutosAteExpiracao ? minutosAteExpiracao.toFixed(0) : 'N/A'}`);
        console.log(`    - Status: ${sistema.status}`);
        console.log(`    - AutoRenewal: ${sistema.autoRenewalEnabled}`);
        console.log(`    - LastRenewal: ${sistema.lastRenewalAt || 'NUNCA'}`);
      });

      // Atualizar fila com todos os sistemas eleg√≠veis
      for (const sistema of sistemasAutoRenew) {
        const expiracaoDate = new Date(sistema.expiracao);
        const minutosAteExpiracao = (expiracaoDate.getTime() - now.getTime()) / (1000 * 60);
        
        // Adicionar ou atualizar na fila se n√£o estiver processando
        if (!this.renewalQueue.has(sistema.id) || this.renewalQueue.get(sistema.id)?.status === 'completed' || this.renewalQueue.get(sistema.id)?.status === 'error') {
          const queueItem: RenewalQueueItem = {
            sistemaId: sistema.id,
            username: sistema.username,
            status: 'waiting',
            estimatedTime: minutosAteExpiracao > 0 ? Math.floor(minutosAteExpiracao) : 0,
            addedAt: new Date(),
            expiration: sistema.expiracao,
            lastRenewalAt: sistema.lastRenewalAt,
            renewalCount: sistema.renewalCount || 0
          };
          
          this.renewalQueue.set(sistema.id, queueItem);
        }
      }
      
      // Filtrar sistemas que precisam de renova√ß√£o
      console.log('\nüéØ Aplicando filtros de renova√ß√£o...');
      const sistemasParaRenovar = sistemasAutoRenew.filter(sistema => {
        // Verificar se j√° est√° sendo renovado
        if (this.isRenewing.has(sistema.id)) {
          console.log(`‚è≠Ô∏è Sistema ${sistema.id} (${sistema.username}) j√° est√° em processo de renova√ß√£o`);
          return false;
        }

        // Verificar se est√° vencido ou pr√≥ximo do vencimento
        const expiracaoDate = new Date(sistema.expiracao);
        const minutosAteExpiracao = (expiracaoDate.getTime() - now.getTime()) / (1000 * 60);
        const isExpired = expiracaoDate <= now;
        
        // SE EST√Å VENCIDO, renovar imediatamente sem verificar √∫ltima renova√ß√£o
        if (isExpired) {
          console.log(`üö® Sistema ${sistema.id} (${sistema.username}) VENCIDO h√° ${Math.abs(minutosAteExpiracao).toFixed(0)} minutos - renova√ß√£o IMEDIATA`);
          return true;
        }
        
        // Se N√ÉO est√° vencido, aplicar a regra de aguardar 4 horas entre renova√ß√µes
        if (sistema.lastRenewalAt) {
          const horasSinceLastRenewal = (now.getTime() - new Date(sistema.lastRenewalAt).getTime()) / (1000 * 60 * 60);
          if (horasSinceLastRenewal < 4) {
            console.log(`‚è∞ Sistema ${sistema.id} (${sistema.username}) foi renovado h√° ${horasSinceLastRenewal.toFixed(1)}h (aguardar 4h)`);
            return false;
          }
        }
        
        // Verificar se est√° pr√≥ximo do vencimento (dentro do tempo configurado)
        if (minutosAteExpiracao <= renewalAdvanceMinutes) {
          console.log(`‚ö†Ô∏è Sistema ${sistema.id} (${sistema.username}) pr√≥ximo do vencimento - ${minutosAteExpiracao.toFixed(0)}min restantes`);
          return true;
        } else {
          console.log(`‚úÖ Sistema ${sistema.id} (${sistema.username}) ainda v√°lido - ${(minutosAteExpiracao/60).toFixed(1)}h restantes`);
          return false;
        }
      });
      
      if (sistemasParaRenovar.length === 0) {
        console.log('‚ú® Nenhum sistema precisa de renova√ß√£o no momento');
        console.log('üîç === FIM DA VERIFICA√á√ÉO DE RENOVA√á√ÉO AUTOM√ÅTICA ===\n');
        return;
      }

      console.log(`\n‚úÖ ${sistemasParaRenovar.length} sistema(s) prontos para renova√ß√£o!`);
      console.log(`üîÑ Iniciando processo de renova√ß√£o sequencial...`);

      // 3. Processar cada sistema SEQUENCIALMENTE (n√£o em paralelo)
      for (const sistema of sistemasParaRenovar) {
        console.log(`\n========================================`);
        console.log(`üéØ Iniciando renova√ß√£o do sistema ${sistema.id}`);
        console.log(`üë§ Usu√°rio: ${sistema.username}`);
        console.log(`üìÖ Expira√ß√£o: ${new Date(sistema.expiracao).toISOString()}`);
        console.log(`========================================\n`);
        
        // Marcar como renovando
        this.isRenewing.add(sistema.id);
        
        // Atualizar status na fila
        const queueItem = this.renewalQueue.get(sistema.id);
        if (queueItem) {
          queueItem.status = 'processing';
          queueItem.startedAt = new Date();
        }

        try {
          // Renovar sistema e aguardar conclus√£o antes de processar o pr√≥ximo
          await this.renewSystem(sistema);
          
          // Aguardar 5 segundos entre renova√ß√µes para n√£o sobrecarregar
          console.log(`‚è≥ Aguardando 5 segundos antes da pr√≥xima renova√ß√£o...`);
          await new Promise(resolve => setTimeout(resolve, 5000));
        } catch (error) {
          console.error(`‚ùå Erro ao renovar sistema ${sistema.id}:`, error);
          // Remover flag de renova√ß√£o em caso de erro
          this.isRenewing.delete(sistema.id);
          
          // Atualizar status na fila
          const queueItem = this.renewalQueue.get(sistema.id);
          if (queueItem) {
            queueItem.status = 'error';
            queueItem.error = error instanceof Error ? error.message : 'Erro desconhecido';
            queueItem.completedAt = new Date();
          }
        }
      }
      
      console.log(`‚úÖ Processo de renova√ß√£o sequencial conclu√≠do`);
      console.log('üîç === FIM DA VERIFICA√á√ÉO DE RENOVA√á√ÉO AUTOM√ÅTICA ===\n');
    } catch (error) {
      console.error('‚ùå Erro ao verificar sistemas para renova√ß√£o:', error);
      console.log('üîç === FIM DA VERIFICA√á√ÉO DE RENOVA√á√ÉO AUTOM√ÅTICA (COM ERRO) ===\n');
    }
  }

  async renewSystem(sistema: any) {
    const traceId = `renewal_${sistema.id}_${Date.now()}`;
    try {
      console.log(`üîÑ [AutoRenewal] INICIANDO renova√ß√£o - TraceId: ${traceId}`);
      console.log(`  Sistema ID: ${sistema.id}`);
      console.log(`  Username: ${sistema.username}`);
      console.log(`  Expira√ß√£o atual: ${sistema.expiracao}`);
      console.log(`  √öltima renova√ß√£o: ${sistema.lastRenewalAt || 'NUNCA'}`);
      console.log(`  Contagem de renova√ß√µes: ${sistema.renewalCount || 0}`);

      // 1. Criar task pendente no banco com sistemaId no metadata
      console.log(`üíæ [AutoRenewal] Criando task de renova√ß√£o no banco [${traceId}]...`);
      
      const taskData = {
        username: `renovacao_${Date.now()}`,
        password: 'pending',
        source: 'renewal',
        status: 'pending',
        generatedAt: new Date(),
        sistemaId: sistema.id, // Adicionar sistemaId diretamente no registro
        metadata: {
          taskType: 'renewal',
          sistemaId: sistema.id, // Garantir que sistemaId est√° no metadata
          systemId: sistema.id, // Manter ambas as chaves por compatibilidade
          system_id: sistema.id, // Adicionar tamb√©m com underscore para compatibilidade
          originalUsername: sistema.username,
          systemUsername: sistema.username,
          systemExpiration: sistema.expiracao,
          status: 'pending',
          requestedAt: new Date().toISOString(),
          traceId: traceId,
          generateNewCredentials: true // Flag expl√≠cita para gerar novas credenciais
        }
      };
      
      console.log(`üîç [AutoRenewal] Dados da task a criar [${traceId}]:`, JSON.stringify(taskData, null, 2));
      
      const [task] = await db
        .insert(officeCredentials)
        .values(taskData)
        .returning();

      console.log(`‚úÖ [AutoRenewal] Task criada com sucesso [${traceId}]:`);
      console.log(`  Task ID: ${task.id}`);
      console.log(`  Sistema ID: ${task.sistemaId}`);
      console.log(`  Username da task: ${task.username}`);
      console.log(`  Metadata:`, JSON.stringify(task.metadata, null, 2));

      // 2. Marcar sistema como em renova√ß√£o no banco
      console.log(`üìä [AutoRenewal] Atualizando sistema no banco [${traceId}]...`);
      
      const updateResult = await db
        .update(sistemasTable)
        .set({
          updatedAt: new Date(),
          lastRenewalAt: new Date(),
          renewalCount: sql`COALESCE(renewal_count, 0) + 1`
        })
        .where(eq(sistemasTable.id, sistema.id))
        .returning();

      if (updateResult && updateResult.length > 0) {
        console.log(`‚úÖ [AutoRenewal] Sistema atualizado no banco [${traceId}]:`);
        console.log(`  LastRenewalAt atualizado para: ${updateResult[0].lastRenewalAt}`);
        console.log(`  RenewalCount atualizado para: ${updateResult[0].renewalCount}`);
      } else {
        console.warn(`‚ö†Ô∏è [AutoRenewal] Sistema n√£o retornou dados ap√≥s update [${traceId}]`);
      }
      
      console.log(`üìù [AutoRenewal] Task ${task.id} criada e aguardando extens√£o [${traceId}]`);
      console.log(`üéØ [AutoRenewal] A extens√£o dever√° processar a task e chamar updateSistemaRenewal`);
      
      // Atualizar status na fila
      const queueItem = this.renewalQueue.get(sistema.id);
      if (queueItem) {
        queueItem.status = 'completed';
        queueItem.completedAt = new Date();
      }

      // 3. Agendar remo√ß√£o da flag de renova√ß√£o ap√≥s 5 minutos
      setTimeout(() => {
        this.isRenewing.delete(sistema.id);
        console.log(`üóëÔ∏è Flag de renova√ß√£o removida para sistema ${sistema.id}`);
      }, 5 * 60 * 1000);

    } catch (error) {
      console.error(`üî¥ [AutoRenewal] ERRO ao criar task de renova√ß√£o [${traceId}]:`, error);
      console.error(`  Sistema ID: ${sistema.id}`);
      console.error(`  Mensagem: ${error.message}`);
      console.error(`  Stack:`, error.stack);
      
      // Remover flag de renova√ß√£o em caso de erro
      this.isRenewing.delete(sistema.id);
      throw error; // Re-throw para que o erro seja tratado no n√≠vel superior
    }
  }

  // Limpar itens antigos da fila
  private cleanupQueue() {
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    for (const [sistemaId, item] of this.renewalQueue.entries()) {
      // Remover itens completados ou com erro h√° mais de 1 hora
      if ((item.status === 'completed' || item.status === 'error') && 
          item.completedAt && item.completedAt < oneHourAgo) {
        this.renewalQueue.delete(sistemaId);
      }
    }
  }
  
  // Obter status da fila de renova√ß√£o
  getRenewalQueue() {
    const queue = Array.from(this.renewalQueue.values())
      .sort((a, b) => {
        // Priorizar por status: processing > waiting > completed/error
        const statusOrder = { processing: 0, waiting: 1, completed: 2, error: 3 };
        const statusDiff = statusOrder[a.status] - statusOrder[b.status];
        if (statusDiff !== 0) return statusDiff;
        
        // Depois ordenar por tempo estimado
        return (a.estimatedTime || 999) - (b.estimatedTime || 999);
      });
    
    return {
      queue,
      nextCheckTime: this.nextCheckTime,
      lastCheckTime: this.lastCheckTime,
      isRunning: this.intervalId !== null,
      processingCount: queue.filter(item => item.status === 'processing').length,
      waitingCount: queue.filter(item => item.status === 'waiting').length,
      completedCount: queue.filter(item => item.status === 'completed').length,
      errorCount: queue.filter(item => item.status === 'error').length
    };
  }
  
  // Obter informa√ß√µes sobre sistemas programados para renova√ß√£o
  async getScheduledRenewals() {
    try {
      const sistemas = await db
        .select()
        .from(sistemasTable)
        .where(eq(sistemasTable.autoRenewalEnabled, true));
      
      const now = new Date();
      
      return sistemas.map(sistema => {
        const expiracaoDate = new Date(sistema.expiracao);
        const minutosAteExpiracao = (expiracaoDate.getTime() - now.getTime()) / (1000 * 60);
        
        return {
          sistemaId: sistema.id,
          username: sistema.username,
          expiration: sistema.expiracao,
          minutesUntilExpiration: Math.floor(minutosAteExpiracao),
          isExpired: expiracaoDate <= now,
          lastRenewalAt: sistema.lastRenewalAt,
          renewalCount: sistema.renewalCount || 0,
          autoRenewalEnabled: sistema.autoRenewalEnabled,
          renewalAdvanceTime: sistema.renewalAdvanceTime
        };
      }).sort((a, b) => a.minutesUntilExpiration - b.minutesUntilExpiration);
    } catch (error) {
      console.error('Erro ao obter renova√ß√µes programadas:', error);
      return [];
    }
  }

  // M√©todo para for√ßar renova√ß√£o de um sistema espec√≠fico
  async forceRenew(systemId: number) {
    try {
      const [sistema] = await db
        .select()
        .from(sistemasTable)
        .where(eq(sistemasTable.id, systemId))
        .limit(1);

      if (!sistema) {
        throw new Error(`Sistema ${systemId} n√£o encontrado`);
      }

      console.log(`üîÑ For√ßando renova√ß√£o do sistema ${systemId}`);
      await this.renewSystem(sistema);
      return { success: true, message: `Renova√ß√£o do sistema ${systemId} iniciada` };
    } catch (error) {
      console.error(`‚ùå Erro ao for√ßar renova√ß√£o do sistema ${systemId}:`, error);
      return { success: false, error: error.message };
    }
  }
}

// Inst√¢ncia singleton do servi√ßo
export const autoRenewalService = new AutoRenewalService();