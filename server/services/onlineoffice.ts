import puppeteer from 'puppeteer';
import { execSync } from 'child_process';
import * as fs from 'fs';

interface IPTVTestResult {
  usuario: string;
  senha: string;
  vencimento?: string;
}

export class OnlineOfficeService {
  private static instance: OnlineOfficeService;
  
  static getInstance(): OnlineOfficeService {
    if (!this.instance) {
      this.instance = new OnlineOfficeService();
    }
    return this.instance;
  }

  private getChromiumPath(): string | undefined {
    // Try to find chromium executable in Replit environment
    try {
      const path = execSync('which chromium', { encoding: 'utf8' }).trim();
      if (path) {
        console.log('üìç Using Chromium at:', path);
        return path;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Could not find chromium via which command');
    }
    
    // Return undefined to let Puppeteer handle it in non-Replit environments
    return undefined;
  }

  async generateIPTVTest(): Promise<IPTVTestResult> {
    let browser;
    
    try {
      console.log('üöÄ Iniciando automa√ß√£o OnlineOffice...');
      
      const executablePath = this.getChromiumPath();
      
      // Inicia o navegador com configura√ß√µes espec√≠ficas
      browser = await puppeteer.launch({
        headless: 'new',
        executablePath: executablePath,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=IsolateOrigins,site-per-process',
          '--no-first-run',
          '--no-zygote',
          '--single-process',
          '--disable-accelerated-2d-canvas',
          '--disable-blink-features=AutomationControlled'
        ]
      });

      const page = await browser.newPage();
      
      // Define user agent e viewport
      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
      await page.setViewport({ width: 1280, height: 720 });

      console.log('üìç Navegando para OnlineOffice...');
      
      // Tenta navegar com diferentes estrat√©gias
      try {
        await page.goto('https://onlineoffice.zip/', {
          waitUntil: 'domcontentloaded', // Mudado de networkidle2 para domcontentloaded
          timeout: 60000 // Aumentado para 60 segundos
        });
      } catch (navError) {
        console.log('‚ö†Ô∏è Primeira tentativa falhou, tentando com waitUntil: load...');
        await page.goto('https://onlineoffice.zip/', {
          waitUntil: 'load',
          timeout: 60000
        });
      }

      // Aguarda a p√°gina carregar e o bot√£o ficar dispon√≠vel
      console.log('‚è≥ Aguardando p√°gina carregar completamente...');
      await new Promise(resolve => setTimeout(resolve, 8000)); // Aumenta tempo de espera para 8 segundos
      
      // Tira screenshot para debug
      console.log('üì∏ Tirando screenshot da p√°gina carregada...');
      await page.screenshot({ path: '/tmp/onlineoffice-loaded.png', fullPage: true });

      console.log('üîç Procurando bot√£o Gerar IPTV...');
      
      // Lista todos os bot√µes na p√°gina para debug
      const buttonsInfo = await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.map(btn => ({
          text: btn.textContent?.trim(),
          classes: btn.className,
          visible: btn.offsetParent !== null
        }));
      });
      console.log('üìã Bot√µes encontrados na p√°gina:', buttonsInfo);
      
      // Usa m√∫ltiplos seletores poss√≠veis
      const buttonSelectors = [
        'button.btn.btn-outline-success',
        'button.btn-outline-success',
        'button[class*="success"]',
        'button'
      ];
      
      let buttonFound = false;
      let buttonSelector = '';
      
      // Tenta cada seletor
      for (const selector of buttonSelectors) {
        try {
          const exists = await page.$(selector);
          if (exists) {
            buttonSelector = selector;
            buttonFound = true;
            console.log(`‚úÖ Encontrou bot√£o com seletor: ${selector}`);
            break;
          }
        } catch (e) {
          console.log(`‚ùå Seletor ${selector} n√£o funcionou`);
        }
      }
      
      try {
        if (!buttonFound) {
          throw new Error('Nenhum bot√£o encontrado com os seletores');
        }
        
        // Aguarda o bot√£o aparecer
        await page.waitForSelector(buttonSelector, { timeout: 5000 });
        
        // Procura especificamente o bot√£o com texto "Gerar IPTV"
        const clicked = await page.evaluate((selector) => {
          const buttons = Array.from(document.querySelectorAll(selector));
          console.log(`Encontrados ${buttons.length} bot√µes com classe btn-outline-success`);
          
          // Procura o bot√£o que cont√©m "Gerar IPTV"
          const button = buttons.find(btn => {
            const text = btn.textContent?.trim() || '';
            console.log(`Verificando bot√£o com texto: "${text}"`);
            return text.toLowerCase().includes('gerar iptv');
          });
          
          if (button) {
            console.log('‚úÖ Bot√£o "Gerar IPTV" encontrado!');
            (button as HTMLElement).click();
            return true;
          }
          
          // Se n√£o encontrou, lista todos os textos dos bot√µes para debug
          buttons.forEach((btn, index) => {
            console.log(`Bot√£o ${index}: "${btn.textContent?.trim()}"`);
          });
          
          return false;
        }, buttonSelector);
        
        if (!clicked) {
          // Tenta m√©todo alternativo - clica no primeiro bot√£o btn-outline-success
          console.log('‚ö†Ô∏è Tentando clicar no primeiro bot√£o success...');
          
          const buttonClicked = await page.evaluate((selector) => {
            const button = document.querySelector(selector) as HTMLElement;
            if (button) {
              console.log(`Clicando no bot√£o: "${button.textContent?.trim()}"`);
              button.click();
              return true;
            }
            return false;
          }, buttonSelector);
          
          if (!buttonClicked) {
            // √öltimo recurso - procura por qualquer bot√£o com "Gerar"
            const anyButtonClicked = await page.evaluate(() => {
              const buttons = Array.from(document.querySelectorAll('button'));
              const button = buttons.find(btn => {
                const text = btn.textContent?.toLowerCase() || '';
                return text.includes('gerar');
              });
              
              if (button) {
                console.log(`Clicando em bot√£o gen√©rico: "${button.textContent?.trim()}"`);
                (button as HTMLElement).click();
                return true;
              }
              return false;
            });
            
            if (!anyButtonClicked) {
              throw new Error('N√£o foi poss√≠vel clicar no bot√£o Gerar IPTV');
            }
          }
        }
        
        console.log('‚úÖ Bot√£o clicado com sucesso!');
        
      } catch (error) {
        console.error('‚ùå Erro ao procurar/clicar no bot√£o:', error);
        
        // Tira screenshot para debug
        const screenshotPath = `/tmp/onlineoffice-button-error-${Date.now()}.png`;
        await page.screenshot({ path: screenshotPath, fullPage: true });
        console.error(`üì∏ Screenshot salvo em: ${screenshotPath}`);
        
        throw new Error('N√£o foi poss√≠vel encontrar ou clicar no bot√£o Gerar IPTV');
      }

      // PRIMEIRO MODAL: Aguarda e confirma modal SweetAlert2 (nota do usu√°rio)
      console.log('üìù Aguardando primeiro modal (SweetAlert2)...');
      
      try {
        await page.waitForSelector('.swal2-popup', { timeout: 5000 });
        console.log('‚úÖ Primeiro modal detectado');
        
        // Pequena pausa para garantir que o modal est√° totalmente renderizado
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Clica no bot√£o de confirmar do SweetAlert2
        const confirmButton = await page.$('.swal2-confirm');
        if (confirmButton) {
          console.log('üîò Clicando em confirmar primeiro modal...');
          await confirmButton.click();
        } else {
          // Tenta m√©todo alternativo
          await page.evaluate(() => {
            const btn = document.querySelector('.swal2-confirm') as HTMLElement;
            if (btn) btn.click();
          });
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Primeiro modal n√£o apareceu ou j√° foi fechado');
      }

      // SEGUNDO MODAL: Aguarda e confirma segundo modal (tempo de teste)
      console.log('‚è±Ô∏è Aguardando segundo modal (tempo de teste)...');
      
      await new Promise(resolve => setTimeout(resolve, 1000)); // Pequena pausa entre modais
      
      try {
        await page.waitForSelector('.swal2-popup', { timeout: 5000 });
        console.log('‚úÖ Segundo modal detectado');
        
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Clica no bot√£o de confirmar do segundo modal
        const confirmButton = await page.$('.swal2-confirm');
        if (confirmButton) {
          console.log('üîò Clicando em confirmar segundo modal...');
          await confirmButton.click();
        } else {
          await page.evaluate(() => {
            const btn = document.querySelector('.swal2-confirm') as HTMLElement;
            if (btn) btn.click();
          });
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Segundo modal n√£o apareceu ou j√° foi fechado');
      }

      console.log('‚è≥ Aguardando resultado ser gerado...');
      
      // Aguarda o resultado aparecer (com polling e timeout maior)
      let result: IPTVTestResult | null = null;
      const maxAttempts = 30; // 30 segundos no m√°ximo
      let attempts = 0;
      
      while (!result && attempts < maxAttempts) {
        attempts++;
        console.log(`üîÑ Tentativa ${attempts}/${maxAttempts} de capturar credenciais...`);
        
        // Aguarda 1 segundo entre tentativas
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Tenta capturar os dados
        const capturedData = await page.evaluate(() => {
          // Procura primeiro em modais/containers de resultado
          const resultContainers = [
            '.swal2-html-container',
            '.swal2-content',
            '.result-container',
            '.credentials-container',
            '[class*="result"]',
            '[class*="credential"]',
            '[id*="result"]',
            '[id*="credential"]'
          ];
          
          for (const selector of resultContainers) {
            const container = document.querySelector(selector);
            if (container) {
              const text = container.textContent || '';
              
              // Procura por padr√µes espec√≠ficos de credenciais
              const usuarioMatch = text.match(/USU√ÅRIO[:\s]+(\d{6,12})/i) ||
                                  text.match(/USER[:\s]+(\d{6,12})/i) ||
                                  text.match(/USUARIO[:\s]+(\d{6,12})/i) ||
                                  text.match(/Login[:\s]+(\d{6,12})/i);
              
              const senhaMatch = text.match(/SENHA[:\s]+([A-Za-z0-9]{6,20})/i) ||
                                text.match(/PASSWORD[:\s]+([A-Za-z0-9]{6,20})/i) ||
                                text.match(/PASS[:\s]+([A-Za-z0-9]{6,20})/i);
              
              if (usuarioMatch && senhaMatch) {
                const vencimentoMatch = text.match(/VENCIMENTO[:\s]+([^\n]+)/i) ||
                                       text.match(/EXPIRA[:\s]+([^\n]+)/i) ||
                                       text.match(/VALIDADE[:\s]+([^\n]+)/i) ||
                                       text.match(/V√ÅLIDO AT√â[:\s]+([^\n]+)/i);
                
                return {
                  usuario: usuarioMatch[1],
                  senha: senhaMatch[1],
                  vencimento: vencimentoMatch ? vencimentoMatch[1].trim() : ''
                };
              }
            }
          }
          
          // Se n√£o encontrou em containers, procura no body todo (mas com mais crit√©rio)
          const bodyText = document.body.innerText;
          
          // Divide o texto em linhas para an√°lise mais precisa
          const lines = bodyText.split('\n');
          let usuario = '';
          let senha = '';
          let vencimento = '';
          
          for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            
            // Procura por linha com USU√ÅRIO
            if (line.match(/USU√ÅRIO[:\s]/i) || line.match(/USER[:\s]/i)) {
              const match = line.match(/[:\s]+(\d{6,12})/);
              if (match) usuario = match[1];
              // Ou pega a pr√≥xima linha se o valor estiver nela
              else if (i + 1 < lines.length && lines[i + 1].match(/^\d{6,12}$/)) {
                usuario = lines[i + 1].trim();
              }
            }
            
            // Procura por linha com SENHA
            if (line.match(/SENHA[:\s]/i) || line.match(/PASSWORD[:\s]/i)) {
              const match = line.match(/[:\s]+([A-Za-z0-9]{6,20})/);
              if (match && !match[1].startsWith('$')) { // Evita capturar valores monet√°rios
                senha = match[1];
              }
              // Ou pega a pr√≥xima linha se o valor estiver nela
              else if (i + 1 < lines.length && lines[i + 1].match(/^[A-Za-z0-9]{6,20}$/)) {
                const nextLine = lines[i + 1].trim();
                if (!nextLine.startsWith('$')) {
                  senha = nextLine;
                }
              }
            }
            
            // Procura por vencimento
            if (line.match(/VENCIMENTO[:\s]/i) || line.match(/VALIDADE[:\s]/i)) {
              const match = line.match(/[:\s]+(.+)/);
              if (match) vencimento = match[1].trim();
              else if (i + 1 < lines.length) {
                vencimento = lines[i + 1].trim();
              }
            }
          }
          
          // Valida as credenciais capturadas
          if (usuario && senha && 
              usuario.match(/^\d{6,12}$/) && 
              senha.match(/^[A-Za-z0-9]{6,20}$/) &&
              !senha.startsWith('$')) {
            return {
              usuario,
              senha,
              vencimento
            };
          }
          
          return null;
        });
        
        if (capturedData && capturedData.usuario && capturedData.senha) {
          result = capturedData;
          console.log('‚úÖ Credenciais capturadas com sucesso!');
          console.log(`üìã Usu√°rio: ${result.usuario}`);
          console.log(`üîë Senha: ${result.senha}`);
          if (result.vencimento) {
            console.log(`üìÖ Vencimento: ${result.vencimento}`);
          }
        }
      }
      
      // Se n√£o conseguiu capturar ap√≥s todas as tentativas
      if (!result) {
        // Tira screenshot para debug
        const screenshotPath = `/tmp/onlineoffice-error-${Date.now()}.png`;
        await page.screenshot({ path: screenshotPath, fullPage: true });
        console.error(`‚ùå Screenshot salvo em: ${screenshotPath}`);
        
        // Captura o HTML para debug
        const pageContent = await page.content();
        const htmlPath = `/tmp/onlineoffice-error-${Date.now()}.html`;
        fs.writeFileSync(htmlPath, pageContent);
        console.error(`‚ùå HTML salvo em: ${htmlPath}`);
        
        throw new Error('N√£o foi poss√≠vel capturar credenciais reais do OnlineOffice ap√≥s 30 tentativas. Verifique se o site est√° funcionando corretamente.');
      }

      console.log('üéâ Teste IPTV gerado com sucesso!');
      return result;

    } catch (error) {
      console.error('‚ùå Erro na automa√ß√£o OnlineOffice:', error);
      
      // Se o browser estiver aberto, tira screenshot final
      if (browser) {
        try {
          const pages = await browser.pages();
          if (pages.length > 0) {
            const screenshotPath = `/tmp/onlineoffice-final-error-${Date.now()}.png`;
            await pages[0].screenshot({ path: screenshotPath, fullPage: true });
            console.error(`üì∏ Screenshot final salvo em: ${screenshotPath}`);
          }
        } catch (e) {
          console.error('N√£o foi poss√≠vel tirar screenshot final:', e);
        }
      }
      
      throw error;
    } finally {
      if (browser) {
        await browser.close();
      }
    }
  }

  async generateIPTVTestManual(credentialsText: string): Promise<IPTVTestResult> {
    // Extrai credenciais de texto copiado manualmente
    const usuarioMatch = credentialsText.match(/USU√ÅRIO[:\s]+(\d{6,12})/i);
    const senhaMatch = credentialsText.match(/SENHA[:\s]+([A-Za-z0-9]{6,20})/i);
    const vencimentoMatch = credentialsText.match(/VENCIMENTO[:\s]+([^\n]+)/i);

    if (!usuarioMatch || !senhaMatch) {
      throw new Error('N√£o foi poss√≠vel extrair usu√°rio e senha v√°lidos do texto fornecido. Certifique-se de que o usu√°rio cont√©m apenas d√≠gitos (6-12) e a senha √© alfanum√©rica (6-20 caracteres).');
    }

    return {
      usuario: usuarioMatch[1],
      senha: senhaMatch[1],
      vencimento: vencimentoMatch ? vencimentoMatch[1].trim() : undefined
    };
  }
}

export default OnlineOfficeService;